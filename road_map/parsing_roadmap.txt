
# Parsing Roadmap - Minishell Bonus (Checklist)

## 1. Tokenisation
- [x] Parcourir la ligne d'entr√©e caract√®re par caract√®re.
- [x] Ignorer les espaces hors quotes.
- [x] D√©tecter et isoler les op√©rateurs simples : |, <, >, ;, (, ).
- [x] D√©tecter et isoler les op√©rateurs doubles : &&, ||, <<, >>.
- [x] G√©rer les quotes simples '...' et doubles "..." correctement.
- [x] G√©rer le caract√®re d'√©chappement \ (ex: echo \"Hello\").
- [x] Cr√©er un token pour chaque mot ou op√©rateur rencontr√©.
- [x] Signaler une erreur si les quotes ne sont pas ferm√©es.

## 2. Structure des Tokens
- [x] Cr√©er un typedef enum e_token_type pour classer les types :
  - WORD, PIPE, REDIR_IN, REDIR_OUT, APPEND, HEREDOC, AND, OR, PAREN_LEFT, PAREN_RIGHT, END.
- [X] Cr√©er la structure t_token contenant :
  - t_token_type type;
  - char *content;
  - struct s_token *next;

## 3. Construction de la Liste
- [x] Allouer dynamiquement chaque t_token.
- [x] Remplir correctement type et content.
- [x] Relier les tokens entre eux via next.
- [x] Terminer la liste proprement avec un NULL.

## 4. Objectif final
- [x] Obtenir une liste cha√Æn√©e propre de tous les tokens pr√™ts pour l'analyse syntaxique.
- [x] √ätre capable d'afficher toute la liste pour debug.

## 5. Bonus Bonus !
- [x] Ajouter un champ "quoted" dans t_token pour indiquer si le mot √©tait entre quotes.
- [x] Ajouter un champ "expandable" pour g√©rer l'expansion de variables plus tard ($VAR).

---

# Exemple visuel rapide

Pour la commande :
echo "Hello World" | grep Hello

La liste de t_token sera :

Type        | Contenu
------------|------------
WORD        | "echo"
WORD        | "Hello World"
PIPE        | "|"
WORD        | "grep"
WORD        | "Hello"
END         | NULL

Chaque token pointe vers le suivant jusqu'√† la fin !

---

Allez courage, tu vas g√©rer chef ! üöÄ
